import Scenario from 'Scenario'

// extend either
//  Scenario
//  AScenario
//   ContextFreeScenario
//   AbstractScenario

class LiquidationScen extends Scenario {
  aliases() {
    return {
      'Governor': '0xff...',
      'wETH': '0x235...',
    }
  }

  // this is not allowed on AScenarios?
  unlocked() {
    return ['Governor']
  }

  // any fn we would specify from on should be part of actor
  async setupUnderwater(a) {
    await a.supplyCollateral({asset: 'wETH', amount: 100})
    await a.withdrawStableMaxWithBorrowing()
    await this.getBorrowRate().expectAtLeast(apr(6))
    await this.timeTravel({days: 365})
  }

  // if multiple tests, can and should run in different orders
  async testLiquidateSuccess(a, b) {
    await this.setupUnderwater(a)
    await b.absorb(a)
    await b.buyCollateral({asset: 'wETH', amount: 100, stableAmount: 500000})
  }

  async testLiquidateFailure(a, b) {
    await this.setupUnderwater(a)
    await b.absorb(a)
    await b.buyCollateral({asset: 'wETH', amount: 100, stableAmount: 10})
  }
}

// alternatively what if you stated assumptions ahead of time?
//  and we dont need context/context free
//   the scen just checks whether assumptions hold before running
//    and the report tells you which assumptions failed
