{
  "strict": true,
  "files": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "source": {
        "git": {
          "repo": "org-25111032@github.com:smartcontractkit/chainlink.git",
          "commit": "aa5a452c2a3761fcb24fccc7165b42aae015023e",
          "path": "contracts/src/v0.8/interfaces/AggregatorV3Interface.sol"
        }
      }
    },
    "canonical-weth/contracts/WETH9.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:gnosis/canonical-weth.git",
          "commit": "0dd1ea3e295eef916d0c6223ec63141137d22d67",
          "path": "contracts/WETH9.sol"
        }
      },
      "patches": [
        {
          "oldStart": 1,
          "oldLines": 8,
          "newStart": 1,
          "newLines": 4,
          "lines": [
            "-/**",
            "- *Submitted for verification at Etherscan.io on 2017-12-12",
            "-*/",
            "-",
            " // Copyright (C) 2015, 2016, 2017 Dapphub",
            " ",
            " // This program is free software: you can redistribute it and/or modify",
            " // it under the terms of the GNU General Public License as published by"
          ]
        },
        {
          "oldStart": 16,
          "oldLines": 9,
          "newStart": 12,
          "newLines": 9,
          "lines": [
            " ",
            " // You should have received a copy of the GNU General Public License",
            " // along with this program.  If not, see <http://www.gnu.org/licenses/>.",
            " ",
            "-pragma solidity 0.8.15;",
            "+pragma solidity >=0.4.22 <0.6;",
            " ",
            " contract WETH9 {",
            "     string public name     = \"Wrapped Ether\";",
            "     string public symbol   = \"WETH\";"
          ]
        },
        {
          "oldStart": 31,
          "oldLines": 9,
          "newStart": 27,
          "newLines": 9,
          "lines": [
            " ",
            "     mapping (address => uint)                       public  balanceOf;",
            "     mapping (address => mapping (address => uint))  public  allowance;",
            " ",
            "-    receive() external payable {",
            "+    function() external payable {",
            "         deposit();",
            "     }",
            "     function deposit() public payable {",
            "         balanceOf[msg.sender] += msg.value;"
          ]
        },
        {
          "oldStart": 41,
          "oldLines": 9,
          "newStart": 37,
          "newLines": 9,
          "lines": [
            "     }",
            "     function withdraw(uint wad) public {",
            "         require(balanceOf[msg.sender] >= wad);",
            "         balanceOf[msg.sender] -= wad;",
            "-        payable(msg.sender).transfer(wad);",
            "+        msg.sender.transfer(wad);",
            "         emit Withdrawal(msg.sender, wad);",
            "     }",
            " ",
            "     function totalSupply() public view returns (uint) {"
          ]
        },
        {
          "oldStart": 65,
          "oldLines": 9,
          "newStart": 61,
          "newLines": 9,
          "lines": [
            "         returns (bool)",
            "     {",
            "         require(balanceOf[src] >= wad);",
            " ",
            "-        if (src != msg.sender && allowance[src][msg.sender] != type(uint).max) {",
            "+        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {",
            "             require(allowance[src][msg.sender] >= wad);",
            "             allowance[src][msg.sender] -= wad;",
            "         }",
            " "
          ]
        }
      ]
    },
    "utils/Address.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:OpenZeppelin/openzeppelin-contracts.git",
          "commit": "afb20119b33072da041c97ea717d3ce4417b5e01",
          "path": "contracts/{}"
        }
      }
    },
    "utils/Context.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:OpenZeppelin/openzeppelin-contracts.git",
          "commit": "afb20119b33072da041c97ea717d3ce4417b5e01",
          "path": "contracts/{}"
        }
      }
    },
    "proxy/Proxy.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:OpenZeppelin/openzeppelin-contracts.git",
          "commit": "afb20119b33072da041c97ea717d3ce4417b5e01",
          "path": "contracts/{}"
        }
      }
    },
    "proxy/transparent/ProxyAdmin.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:OpenZeppelin/openzeppelin-contracts.git",
          "commit": "afb20119b33072da041c97ea717d3ce4417b5e01",
          "path": "contracts/{}"
        }
      }
    },
    "proxy/transparent/TransparentUpgradeableProxy.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:OpenZeppelin/openzeppelin-contracts.git",
          "commit": "afb20119b33072da041c97ea717d3ce4417b5e01",
          "path": "contracts/{}"
        }
      }
    },
    "proxy/ERC1967/ERC1967Proxy.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:OpenZeppelin/openzeppelin-contracts.git",
          "commit": "afb20119b33072da041c97ea717d3ce4417b5e01",
          "path": "contracts/{}"
        }
      }
    },
    "proxy/ERC1967/ERC1967Upgrade.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:OpenZeppelin/openzeppelin-contracts.git",
          "commit": "afb20119b33072da041c97ea717d3ce4417b5e01",
          "path": "contracts/{}"
        }
      }
    },
    "access/Ownable.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:OpenZeppelin/openzeppelin-contracts.git",
          "commit": "afb20119b33072da041c97ea717d3ce4417b5e01",
          "path": "contracts/{}"
        }
      }
    },
    "proxy/beacon/IBeacon.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:OpenZeppelin/openzeppelin-contracts.git",
          "commit": "afb20119b33072da041c97ea717d3ce4417b5e01",
          "path": "contracts/{}"
        }
      }
    },
    "interfaces/draft-IERC1822.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:OpenZeppelin/openzeppelin-contracts.git",
          "commit": "afb20119b33072da041c97ea717d3ce4417b5e01",
          "path": "contracts/{}"
        }
      }
    },
    "utils/StorageSlot.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:OpenZeppelin/openzeppelin-contracts.git",
          "commit": "afb20119b33072da041c97ea717d3ce4417b5e01",
          "path": "contracts/{}"
        }
      }
    },
    "Timelock.sol": {
      "source": {
        "git": {
          "repo": "git@github.com:compound-finance/compound-protocol.git",
          "commit": "a3214f67b73310d547e00fc578e8355911c9d376",
          "path": "contracts/Timelock.sol"
        }
      },
      "patches": [
        {
          "oldStart": 1,
          "oldLines": 29,
          "newStart": 1,
          "newLines": 34,
          "lines": [
            "-// SPDX-License-Identifier: BUSL-1.1",
            "-pragma solidity 0.8.15;",
            "+// SPDX-License-Identifier: BSD-3-Clause",
            "+pragma solidity ^0.8.10;",
            " ",
            "-import \"../ITimelock.sol\";",
            "+import \"./SafeMath.sol\";",
            " ",
            "-contract Timelock is ITimelock {",
            "-    uint public immutable GRACE_PERIOD;",
            "-    uint public immutable MINIMUM_DELAY;",
            "-    uint public immutable MAXIMUM_DELAY;",
            "+contract Timelock {",
            "+    using SafeMath for uint;",
            " ",
            "+    event NewAdmin(address indexed newAdmin);",
            "+    event NewPendingAdmin(address indexed newPendingAdmin);",
            "+    event NewDelay(uint indexed newDelay);",
            "+    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);",
            "+    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);",
            "+    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);",
            "+",
            "+    uint public constant GRACE_PERIOD = 14 days;",
            "+    uint public constant MINIMUM_DELAY = 2 days;",
            "+    uint public constant MAXIMUM_DELAY = 30 days;",
            "+",
            "     address public admin;",
            "     address public pendingAdmin;",
            "     uint public delay;",
            " ",
            "     mapping (bytes32 => bool) public queuedTransactions;",
            " ",
            " ",
            "-    constructor(address admin_, uint delay_, uint gracePeriod_, uint minimumDelay_, uint maxiumumDelay_) public {",
            "-        require(delay_ >= minimumDelay_, \"Timelock::constructor: Delay must exceed minimum delay.\");",
            "-        require(delay_ <= maxiumumDelay_, \"Timelock::setDelay: Delay must not exceed maximum delay.\");",
            "+    constructor(address admin_, uint delay_) public {",
            "+        require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");",
            "+        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");",
            " ",
            "-        GRACE_PERIOD = gracePeriod_;",
            "-        MINIMUM_DELAY = minimumDelay_;",
            "-        MAXIMUM_DELAY = maxiumumDelay_;",
            "-",
            "         admin = admin_;",
            "         delay = delay_;",
            "     }",
            " "
          ]
        },
        {
          "oldStart": 54,
          "oldLines": 9,
          "newStart": 59,
          "newLines": 9,
          "lines": [
            "     }",
            " ",
            "     function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {",
            "         require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");",
            "-        require(eta >= (getBlockTimestamp() + delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");",
            "+        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");",
            " ",
            "         bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));",
            "         queuedTransactions[txHash] = true;",
            " "
          ]
        },
        {
          "oldStart": 78,
          "oldLines": 9,
          "newStart": 83,
          "newLines": 9,
          "lines": [
            " ",
            "         bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));",
            "         require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");",
            "         require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");",
            "-        require(getBlockTimestamp() <= (eta + GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");",
            "+        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");",
            " ",
            "         queuedTransactions[txHash] = false;",
            " ",
            "         bytes memory callData;"
          ]
        },
        {
          "oldStart": 90,
          "oldLines": 8,
          "newStart": 95,
          "newLines": 9,
          "lines": [
            "         } else {",
            "             callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);",
            "         }",
            " ",
            "+        // solium-disable-next-line security/no-call-value",
            "         (bool success, bytes memory returnData) = target.call{value: value}(callData);",
            "         require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");",
            " ",
            "         emit ExecuteTransaction(txHash, target, value, signature, data, eta);"
          ]
        },
        {
          "oldStart": 99,
          "oldLines": 7,
          "newStart": 105,
          "newLines": 8,
          "lines": [
            "         return returnData;",
            "     }",
            " ",
            "     function getBlockTimestamp() internal view returns (uint) {",
            "+        // solium-disable-next-line security/no-block-members",
            "         return block.timestamp;",
            "     }",
            " }"
          ]
        }
      ]
    }
  }
}
