import nock from 'nock';
import { expect } from 'chai';

import { Cache } from '../Cache';
import { getBuildFile, storeBuildFile } from '../ContractMap';
import { fetchAndCacheContract, fetchContract, importContract } from '../Import';
import { BuildFile } from '../Types';

export const apiTestResult = {
  status: '1',
  message: 'OK',
  result: [
    {
      SourceCode:
        '/**\r\n * SPDX-License-Identifier: MIT\r\n *\r\n * Copyright (c) 2018 zOS Global Limited.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the "Software"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n// File: contracts/upgradeability/Proxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @notice Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n * @dev Forked from https://github.com/zeppelinos/zos-lib/blob/8a16ef3ad17ec7430e3a9d2b5e3f39b8204f8c8d/contracts/upgradeability/Proxy.sol\r\n * Modifications:\r\n * 1. Reformat and conform to Solidity 0.6 syntax (5/13/20)\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Fallback function.\r\n     * Implemented entirely in `_fallback`.\r\n     */\r\n    fallback() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @return The Address of the implementation.\r\n     */\r\n    function _implementation() internal virtual view returns (address);\r\n\r\n    /**\r\n     * @dev Delegates execution to an implementation contract.\r\n     * This is a low level function that doesn\'t return to its internal call site.\r\n     * It will return to the external caller whatever the implementation returns.\r\n     * @param implementation Address to delegate.\r\n     */\r\n    function _delegate(address implementation) internal {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don\'t know the size yet.\r\n            let result := delegatecall(\r\n                gas(),\r\n                implementation,\r\n                0,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n                // delegatecall returns 0 on error.\r\n                case 0 {\r\n                    revert(0, returndatasize())\r\n                }\r\n                default {\r\n                    return(0, returndatasize())\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function that is run as the first thing in the fallback function.\r\n     * Can be redefined in derived contracts to add functionality.\r\n     * Redefinitions must call super._willFallback().\r\n     */\r\n    function _willFallback() internal virtual {}\r\n\r\n    /**\r\n     * @dev fallback implementation.\r\n     * Extracted to enable manual triggering.\r\n     */\r\n    function _fallback() internal {\r\n        _willFallback();\r\n        _delegate(_implementation());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256(\'\')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeability/UpgradeabilityProxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @notice This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n * @dev Forked from https://github.com/zeppelinos/zos-lib/blob/8a16ef3ad17ec7430e3a9d2b5e3f39b8204f8c8d/contracts/upgradeability/UpgradeabilityProxy.sol\r\n * Modifications:\r\n * 1. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\r\n * 2. Use Address utility library from the latest OpenZeppelin (5/13/20)\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     * @param implementation Address of the new implementation.\r\n     */\r\n    event Upgraded(address implementation);\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of "org.zeppelinos.proxy.implementation", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32\r\n        private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n\r\n    /**\r\n     * @dev Contract constructor.\r\n     * @param implementationContract Address of the initial implementation.\r\n     */\r\n    constructor(address implementationContract) public {\r\n        assert(\r\n            IMPLEMENTATION_SLOT ==\r\n                keccak256("org.zeppelinos.proxy.implementation")\r\n        );\r\n\r\n        _setImplementation(implementationContract);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     * @return impl Address of the current implementation\r\n     */\r\n    function _implementation() internal override view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades the proxy to a new implementation.\r\n     * @param newImplementation Address of the new implementation.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the implementation address of the proxy.\r\n     * @param newImplementation Address of the new implementation.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(\r\n            Address.isContract(newImplementation),\r\n            "Cannot set a proxy implementation to a non-contract address"\r\n        );\r\n\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, newImplementation)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeability/AdminUpgradeabilityProxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @notice This contract combines an upgradeability proxy with an authorization\r\n * mechanism for administrative tasks.\r\n * @dev Forked from https://github.com/zeppelinos/zos-lib/blob/8a16ef3ad17ec7430e3a9d2b5e3f39b8204f8c8d/contracts/upgradeability/AdminUpgradeabilityProxy.sol\r\n * Modifications:\r\n * 1. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\r\n * 2. Remove ifAdmin modifier from admin() and implementation() (5/13/20)\r\n */\r\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\r\n    /**\r\n     * @dev Emitted when the administration has been transferred.\r\n     * @param previousAdmin Address of the previous admin.\r\n     * @param newAdmin Address of the new admin.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of "org.zeppelinos.proxy.admin", and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32\r\n        private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n    /**\r\n     * @dev Modifier to check whether the `msg.sender` is the admin.\r\n     * If it is, it will run the function. Otherwise, it will delegate the call\r\n     * to the implementation.\r\n     */\r\n    modifier ifAdmin() {\r\n        if (msg.sender == _admin()) {\r\n            _;\r\n        } else {\r\n            _fallback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Contract constructor.\r\n     * It sets the `msg.sender` as the proxy administrator.\r\n     * @param implementationContract address of the initial implementation.\r\n     */\r\n    constructor(address implementationContract)\r\n        public\r\n        UpgradeabilityProxy(implementationContract)\r\n    {\r\n        assert(ADMIN_SLOT == keccak256("org.zeppelinos.proxy.admin"));\r\n\r\n        _setAdmin(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @return The address of the proxy admin.\r\n     */\r\n    function admin() external view returns (address) {\r\n        return _admin();\r\n    }\r\n\r\n    /**\r\n     * @return The address of the implementation.\r\n     */\r\n    function implementation() external view returns (address) {\r\n        return _implementation();\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     * Only the current admin can call this function.\r\n     * @param newAdmin Address to transfer proxy administration to.\r\n     */\r\n    function changeAdmin(address newAdmin) external ifAdmin {\r\n        require(\r\n            newAdmin != address(0),\r\n            "Cannot change the admin of a proxy to the zero address"\r\n        );\r\n        emit AdminChanged(_admin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the backing implementation of the proxy.\r\n     * Only the admin can call this function.\r\n     * @param newImplementation Address of the new implementation.\r\n     */\r\n    function upgradeTo(address newImplementation) external ifAdmin {\r\n        _upgradeTo(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the backing implementation of the proxy and call a function\r\n     * on the new implementation.\r\n     * This is useful to initialize the proxied contract.\r\n     * @param newImplementation Address of the new implementation.\r\n     * @param data Data to send as msg.data in the low level call.\r\n     * It should include the signature and the parameters of the function to be\r\n     * called, as described in\r\n     * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\r\n     */\r\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\r\n        external\r\n        payable\r\n        ifAdmin\r\n    {\r\n        _upgradeTo(newImplementation);\r\n        // prettier-ignore\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success,) = address(this).call{value: msg.value}(data);\r\n        // solhint-disable-next-line reason-string\r\n        require(success);\r\n    }\r\n\r\n    /**\r\n     * @return adm The admin slot.\r\n     */\r\n    function _admin() internal view returns (address adm) {\r\n        bytes32 slot = ADMIN_SLOT;\r\n\r\n        assembly {\r\n            adm := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the proxy admin.\r\n     * @param newAdmin Address of the new proxy admin.\r\n     */\r\n    function _setAdmin(address newAdmin) internal {\r\n        bytes32 slot = ADMIN_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, newAdmin)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Only fall back when the sender is not the admin.\r\n     */\r\n    function _willFallback() internal override {\r\n        require(\r\n            msg.sender != _admin(),\r\n            "Cannot call fallback function from the proxy admin"\r\n        );\r\n        super._willFallback();\r\n    }\r\n}\r\n\r\n// File: contracts/FiatTokenProxy.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title FiatTokenProxy\r\n * @dev This contract proxies FiatToken calls and enables FiatToken upgrades\r\n */\r\ncontract FiatTokenProxy is AdminUpgradeabilityProxy {\r\n    constructor(address implementationContract)\r\n        public\r\n        AdminUpgradeabilityProxy(implementationContract)\r\n    {}\r\n}',
      ABI: '[{"inputs":[{"internalType":"address","name":"implementationContract","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newAdmin","type":"address"}],"name":"changeAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}]',
      ContractName: 'FiatTokenProxy',
      CompilerVersion: 'v0.6.12+commit.27d51765',
      OptimizationUsed: '1',
      Runs: '10000000',
      ConstructorArguments: '0000000000000000000000007f2239511051b875ccf84dab02d5a307adcd51c2',
      EVMVersion: 'Default',
      Library: '',
      LicenseType: 'MIT',
      Proxy: '1',
      Implementation: '0xa3fa3d254bf6af295b5b22cc6730b04144314890',
      SwarmSource: 'ipfs://6715e283f350a976c05fe8b17fc01929cb137086f941d36864b48c4269d883b2',
    },
  ],
};

export const fiatTokenBuildFile: BuildFile = {
  contract: 'FiatTokenProxy',
  contracts: {
    'contracts/FiatTokenProxy.sol:FiatTokenProxy': {
      network: 'avalanche',
      address: '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e',
      name: 'FiatTokenProxy',
      abi: '[{"inputs":[{"internalType":"address","name":"implementationContract","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"stateMutability":"payable","type":"fallback"},{"inputs":[],"name":"admin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newAdmin","type":"address"}],"name":"changeAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"name":"upgradeTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"upgradeToAndCall","outputs":[],"stateMutability":"payable","type":"function"}]',
      bin: '608060405234801561001057600080fd5b506040516108a93803806108a98339818101604052602081101561003357600080fd5b5051808061004081610051565b5061004a336100c3565b5050610123565b610064816100e760201b61042a1760201c565b61009f5760405162461bcd60e51b815260040180806020018281038252603b81526020018061086e603b913960400191505060405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c355565b7f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b55565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061011b57508115155b949350505050565b61073c806101326000396000f3fe60806040526004361061005a5760003560e01c80635c60da1b116100435780635c60da1b146101315780638f2839701461016f578063f851a440146101af5761005a565b80633659cfe6146100645780634f1ef286146100a4575b6100626101c4565b005b34801561007057600080fd5b506100626004803603602081101561008757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101de565b610062600480360360408110156100ba57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156100f257600080fd5b82018360208201111561010457600080fd5b8035906020019184600183028401116401000000008311171561012657600080fd5b509092509050610232565b34801561013d57600080fd5b50610146610309565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561017b57600080fd5b506100626004803603602081101561019257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610318565b3480156101bb57600080fd5b50610146610420565b6101cc610466565b6101dc6101d76104fa565b61051f565b565b6101e6610543565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102275761022281610568565b61022f565b61022f6101c4565b50565b61023a610543565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102fc5761027683610568565b60003073ffffffffffffffffffffffffffffffffffffffff16348484604051808383808284376040519201945060009350909150508083038185875af1925050503d80600081146102e3576040519150601f19603f3d011682016040523d82523d6000602084013e6102e8565b606091505b50509050806102f657600080fd5b50610304565b6103046101c4565b505050565b60006103136104fa565b905090565b610320610543565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102275773ffffffffffffffffffffffffffffffffffffffff81166103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806106966036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103e8610543565b6040805173ffffffffffffffffffffffffffffffffffffffff928316815291841660208301528051918290030190a1610222816105bd565b6000610313610543565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061045e57508115155b949350505050565b61046e610543565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806106646032913960400191505060405180910390fd5b6101dc6101dc565b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c35490565b3660008037600080366000845af43d6000803e80801561053e573d6000f35b3d6000fd5b7f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b5490565b610571816105e1565b6040805173ffffffffffffffffffffffffffffffffffffffff8316815290517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9181900360200190a150565b7f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b55565b6105ea8161042a565b61063f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001806106cc603b913960400191505060405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c35556fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a26469706673582212206715e283f350a976c05fe8b17fc01929cb137086f941d36864b48c4269d883b264736f6c634300060c003343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373',
      constructorArgs: '0000000000000000000000007f2239511051b875ccf84dab02d5a307adcd51c2',
      metadata:
        '{"compiler":{"version":"v0.6.12+commit.27d51765"},"language":"Solidity","output":{"abi":"[{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"implementationContract\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"previousAdmin\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"newAdmin\\",\\"type\\":\\"address\\"}],\\"name\\":\\"AdminChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"implementation\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Upgraded\\",\\"type\\":\\"event\\"},{\\"stateMutability\\":\\"payable\\",\\"type\\":\\"fallback\\"},{\\"inputs\\":[],\\"name\\":\\"admin\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newAdmin\\",\\"type\\":\\"address\\"}],\\"name\\":\\"changeAdmin\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"implementation\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newImplementation\\",\\"type\\":\\"address\\"}],\\"name\\":\\"upgradeTo\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newImplementation\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"upgradeToAndCall\\",\\"outputs\\":[],\\"stateMutability\\":\\"payable\\",\\"type\\":\\"function\\"}]"},"devdoc":{},"sources":{"contracts/FiatTokenProxy.sol":{"content":"/**\\r\\n * SPDX-License-Identifier: MIT\\r\\n *\\r\\n * Copyright (c) 2018 zOS Global Limited.\\r\\n *\\r\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\r\\n * of this software and associated documentation files (the \\"Software\\"), to deal\\r\\n * in the Software without restriction, including without limitation the rights\\r\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\r\\n * copies of the Software, and to permit persons to whom the Software is\\r\\n * furnished to do so, subject to the following conditions:\\r\\n *\\r\\n * The above copyright notice and this permission notice shall be included in\\r\\n * copies or substantial portions of the Software.\\r\\n *\\r\\n * THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\r\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\r\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\r\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\r\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\r\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\r\\n * SOFTWARE.\\r\\n */\\r\\n\\r\\n// File: contracts/upgradeability/Proxy.sol\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @notice Implements delegation of calls to other contracts, with proper\\r\\n * forwarding of return values and bubbling of failures.\\r\\n * It defines a fallback function that delegates all calls to the address\\r\\n * returned by the abstract _implementation() internal function.\\r\\n * @dev Forked from https://github.com/zeppelinos/zos-lib/blob/8a16ef3ad17ec7430e3a9d2b5e3f39b8204f8c8d/contracts/upgradeability/Proxy.sol\\r\\n * Modifications:\\r\\n * 1. Reformat and conform to Solidity 0.6 syntax (5/13/20)\\r\\n */\\r\\nabstract contract Proxy {\\r\\n    /**\\r\\n     * @dev Fallback function.\\r\\n     * Implemented entirely in `_fallback`.\\r\\n     */\\r\\n    fallback() external payable {\\r\\n        _fallback();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The Address of the implementation.\\r\\n     */\\r\\n    function _implementation() internal virtual view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates execution to an implementation contract.\\r\\n     * This is a low level function that doesn\'t return to its internal call site.\\r\\n     * It will return to the external caller whatever the implementation returns.\\r\\n     * @param implementation Address to delegate.\\r\\n     */\\r\\n    function _delegate(address implementation) internal {\\r\\n        assembly {\\r\\n            // Copy msg.data. We take full control of memory in this inline assembly\\r\\n            // block because it will not return to Solidity code. We overwrite the\\r\\n            // Solidity scratch pad at memory position 0.\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n            // Call the implementation.\\r\\n            // out and outsize are 0 because we don\'t know the size yet.\\r\\n            let result := delegatecall(\\r\\n                gas(),\\r\\n                implementation,\\r\\n                0,\\r\\n                calldatasize(),\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n\\r\\n            // Copy the returned data.\\r\\n            returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n            switch result\\r\\n                // delegatecall returns 0 on error.\\r\\n                case 0 {\\r\\n                    revert(0, returndatasize())\\r\\n                }\\r\\n                default {\\r\\n                    return(0, returndatasize())\\r\\n                }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Function that is run as the first thing in the fallback function.\\r\\n     * Can be redefined in derived contracts to add functionality.\\r\\n     * Redefinitions must call super._willFallback().\\r\\n     */\\r\\n    function _willFallback() internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev fallback implementation.\\r\\n     * Extracted to enable manual triggering.\\r\\n     */\\r\\n    function _fallback() internal {\\r\\n        _willFallback();\\r\\n        _delegate(_implementation());\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/Address.sol\\r\\n\\r\\npragma solidity ^0.6.2;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\'\')`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash && codehash != 0x0);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: contracts/upgradeability/UpgradeabilityProxy.sol\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @notice This contract implements a proxy that allows to change the\\r\\n * implementation address to which it will delegate.\\r\\n * Such a change is called an implementation upgrade.\\r\\n * @dev Forked from https://github.com/zeppelinos/zos-lib/blob/8a16ef3ad17ec7430e3a9d2b5e3f39b8204f8c8d/contracts/upgradeability/UpgradeabilityProxy.sol\\r\\n * Modifications:\\r\\n * 1. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\\r\\n * 2. Use Address utility library from the latest OpenZeppelin (5/13/20)\\r\\n */\\r\\ncontract UpgradeabilityProxy is Proxy {\\r\\n    /**\\r\\n     * @dev Emitted when the implementation is upgraded.\\r\\n     * @param implementation Address of the new implementation.\\r\\n     */\\r\\n    event Upgraded(address implementation);\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the address of the current implementation.\\r\\n     * This is the keccak-256 hash of \\"org.zeppelinos.proxy.implementation\\", and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32\\r\\n        private constant IMPLEMENTATION_SLOT = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\\r\\n\\r\\n    /**\\r\\n     * @dev Contract constructor.\\r\\n     * @param implementationContract Address of the initial implementation.\\r\\n     */\\r\\n    constructor(address implementationContract) public {\\r\\n        assert(\\r\\n            IMPLEMENTATION_SLOT ==\\r\\n                keccak256(\\"org.zeppelinos.proxy.implementation\\")\\r\\n        );\\r\\n\\r\\n        _setImplementation(implementationContract);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current implementation.\\r\\n     * @return impl Address of the current implementation\\r\\n     */\\r\\n    function _implementation() internal override view returns (address impl) {\\r\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n        assembly {\\r\\n            impl := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrades the proxy to a new implementation.\\r\\n     * @param newImplementation Address of the new implementation.\\r\\n     */\\r\\n    function _upgradeTo(address newImplementation) internal {\\r\\n        _setImplementation(newImplementation);\\r\\n        emit Upgraded(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the implementation address of the proxy.\\r\\n     * @param newImplementation Address of the new implementation.\\r\\n     */\\r\\n    function _setImplementation(address newImplementation) private {\\r\\n        require(\\r\\n            Address.isContract(newImplementation),\\r\\n            \\"Cannot set a proxy implementation to a non-contract address\\"\\r\\n        );\\r\\n\\r\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\r\\n\\r\\n        assembly {\\r\\n            sstore(slot, newImplementation)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: contracts/upgradeability/AdminUpgradeabilityProxy.sol\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @notice This contract combines an upgradeability proxy with an authorization\\r\\n * mechanism for administrative tasks.\\r\\n * @dev Forked from https://github.com/zeppelinos/zos-lib/blob/8a16ef3ad17ec7430e3a9d2b5e3f39b8204f8c8d/contracts/upgradeability/AdminUpgradeabilityProxy.sol\\r\\n * Modifications:\\r\\n * 1. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\\r\\n * 2. Remove ifAdmin modifier from admin() and implementation() (5/13/20)\\r\\n */\\r\\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\\r\\n    /**\\r\\n     * @dev Emitted when the administration has been transferred.\\r\\n     * @param previousAdmin Address of the previous admin.\\r\\n     * @param newAdmin Address of the new admin.\\r\\n     */\\r\\n    event AdminChanged(address previousAdmin, address newAdmin);\\r\\n\\r\\n    /**\\r\\n     * @dev Storage slot with the admin of the contract.\\r\\n     * This is the keccak-256 hash of \\"org.zeppelinos.proxy.admin\\", and is\\r\\n     * validated in the constructor.\\r\\n     */\\r\\n    bytes32\\r\\n        private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to check whether the `msg.sender` is the admin.\\r\\n     * If it is, it will run the function. Otherwise, it will delegate the call\\r\\n     * to the implementation.\\r\\n     */\\r\\n    modifier ifAdmin() {\\r\\n        if (msg.sender == _admin()) {\\r\\n            _;\\r\\n        } else {\\r\\n            _fallback();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Contract constructor.\\r\\n     * It sets the `msg.sender` as the proxy administrator.\\r\\n     * @param implementationContract address of the initial implementation.\\r\\n     */\\r\\n    constructor(address implementationContract)\\r\\n        public\\r\\n        UpgradeabilityProxy(implementationContract)\\r\\n    {\\r\\n        assert(ADMIN_SLOT == keccak256(\\"org.zeppelinos.proxy.admin\\"));\\r\\n\\r\\n        _setAdmin(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The address of the proxy admin.\\r\\n     */\\r\\n    function admin() external view returns (address) {\\r\\n        return _admin();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return The address of the implementation.\\r\\n     */\\r\\n    function implementation() external view returns (address) {\\r\\n        return _implementation();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Changes the admin of the proxy.\\r\\n     * Only the current admin can call this function.\\r\\n     * @param newAdmin Address to transfer proxy administration to.\\r\\n     */\\r\\n    function changeAdmin(address newAdmin) external ifAdmin {\\r\\n        require(\\r\\n            newAdmin != address(0),\\r\\n            \\"Cannot change the admin of a proxy to the zero address\\"\\r\\n        );\\r\\n        emit AdminChanged(_admin(), newAdmin);\\r\\n        _setAdmin(newAdmin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the backing implementation of the proxy.\\r\\n     * Only the admin can call this function.\\r\\n     * @param newImplementation Address of the new implementation.\\r\\n     */\\r\\n    function upgradeTo(address newImplementation) external ifAdmin {\\r\\n        _upgradeTo(newImplementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Upgrade the backing implementation of the proxy and call a function\\r\\n     * on the new implementation.\\r\\n     * This is useful to initialize the proxied contract.\\r\\n     * @param newImplementation Address of the new implementation.\\r\\n     * @param data Data to send as msg.data in the low level call.\\r\\n     * It should include the signature and the parameters of the function to be\\r\\n     * called, as described in\\r\\n     * https://solidity.readthedocs.io/en/develop/abi-spec.html#function-selector-and-argument-encoding.\\r\\n     */\\r\\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\\r\\n        external\\r\\n        payable\\r\\n        ifAdmin\\r\\n    {\\r\\n        _upgradeTo(newImplementation);\\r\\n        // prettier-ignore\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success,) = address(this).call{value: msg.value}(data);\\r\\n        // solhint-disable-next-line reason-string\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return adm The admin slot.\\r\\n     */\\r\\n    function _admin() internal view returns (address adm) {\\r\\n        bytes32 slot = ADMIN_SLOT;\\r\\n\\r\\n        assembly {\\r\\n            adm := sload(slot)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the address of the proxy admin.\\r\\n     * @param newAdmin Address of the new proxy admin.\\r\\n     */\\r\\n    function _setAdmin(address newAdmin) internal {\\r\\n        bytes32 slot = ADMIN_SLOT;\\r\\n\\r\\n        assembly {\\r\\n            sstore(slot, newAdmin)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only fall back when the sender is not the admin.\\r\\n     */\\r\\n    function _willFallback() internal override {\\r\\n        require(\\r\\n            msg.sender != _admin(),\\r\\n            \\"Cannot call fallback function from the proxy admin\\"\\r\\n        );\\r\\n        super._willFallback();\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: contracts/FiatTokenProxy.sol\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n * @title FiatTokenProxy\\r\\n * @dev This contract proxies FiatToken calls and enables FiatToken upgrades\\r\\n */\\r\\ncontract FiatTokenProxy is AdminUpgradeabilityProxy {\\r\\n    constructor(address implementationContract)\\r\\n        public\\r\\n        AdminUpgradeabilityProxy(implementationContract)\\r\\n    {}\\r\\n}","keccak256":""}},"settings":{"optimizer":{"enabled":true,"runs":10000000}},"version":1}',
    },
  },
  version: 'v0.6.12+commit.27d51765',
};

export function mockImportSuccess(address: string) {
  process.env.SNOWTRACE_KEY = 'AVA_KEY';
  nock('https://api.snowtrace.io/')
    .get('/api')
    .query({ module: 'contract', action: 'getsourcecode', address, apikey: 'AVA_KEY' })
    .reply(200, apiTestResult);

  nock('https://snowtrace.io/')
    .get(`/address/${address}`)
    .reply(
      200,
      `<div id='verifiedbytecode2'>608060405234801561001057600080fd5b506040516108a93803806108a98339818101604052602081101561003357600080fd5b5051808061004081610051565b5061004a336100c3565b5050610123565b610064816100e760201b61042a1760201c565b61009f5760405162461bcd60e51b815260040180806020018281038252603b81526020018061086e603b913960400191505060405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c355565b7f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b55565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061011b57508115155b949350505050565b61073c806101326000396000f3fe60806040526004361061005a5760003560e01c80635c60da1b116100435780635c60da1b146101315780638f2839701461016f578063f851a440146101af5761005a565b80633659cfe6146100645780634f1ef286146100a4575b6100626101c4565b005b34801561007057600080fd5b506100626004803603602081101561008757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101de565b610062600480360360408110156100ba57600080fd5b73ffffffffffffffffffffffffffffffffffffffff82351691908101906040810160208201356401000000008111156100f257600080fd5b82018360208201111561010457600080fd5b8035906020019184600183028401116401000000008311171561012657600080fd5b509092509050610232565b34801561013d57600080fd5b50610146610309565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561017b57600080fd5b506100626004803603602081101561019257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610318565b3480156101bb57600080fd5b50610146610420565b6101cc610466565b6101dc6101d76104fa565b61051f565b565b6101e6610543565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102275761022281610568565b61022f565b61022f6101c4565b50565b61023a610543565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102fc5761027683610568565b60003073ffffffffffffffffffffffffffffffffffffffff16348484604051808383808284376040519201945060009350909150508083038185875af1925050503d80600081146102e3576040519150601f19603f3d011682016040523d82523d6000602084013e6102e8565b606091505b50509050806102f657600080fd5b50610304565b6103046101c4565b505050565b60006103136104fa565b905090565b610320610543565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102275773ffffffffffffffffffffffffffffffffffffffff81166103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806106966036913960400191505060405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103e8610543565b6040805173ffffffffffffffffffffffffffffffffffffffff928316815291841660208301528051918290030190a1610222816105bd565b6000610313610543565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081811480159061045e57508115155b949350505050565b61046e610543565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806106646032913960400191505060405180910390fd5b6101dc6101dc565b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c35490565b3660008037600080366000845af43d6000803e80801561053e573d6000f35b3d6000fd5b7f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b5490565b610571816105e1565b6040805173ffffffffffffffffffffffffffffffffffffffff8316815290517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9181900360200190a150565b7f10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b55565b6105ea8161042a565b61063f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001806106cc603b913960400191505060405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c35556fe43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e2066726f6d207468652070726f78792061646d696e43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f787920746f20746865207a65726f206164647265737343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373a26469706673582212206715e283f350a976c05fe8b17fc01929cb137086f941d36864b48c4269d883b264736f6c634300060c003343616e6e6f742073657420612070726f787920696d706c656d656e746174696f6e20746f2061206e6f6e2d636f6e74726163742061646472657373</div>`
    );
}

describe('Import', () => {
  beforeEach(async () => {
    nock.disableNetConnect();
  });

  it('imports from Etherscan', async () => {
    mockImportSuccess('0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e');
    let importResult = await importContract(
      'avalanche',
      '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e',
      0
    );
    expect(importResult).to.eql(fiatTokenBuildFile);
  });

  it('loads from cache', async () => {
    let cache = new Cache('test-network', 'test-deployment');
    await storeBuildFile(cache, 'avalanche', '0x0000000000000000000000000000000000000001', fiatTokenBuildFile);
    expect(
      await fetchContract(cache, 'avalanche', '0x0000000000000000000000000000000000000001', 0)
    ).to.equal(fiatTokenBuildFile);
  });

  it('stores in cache', async () => {
    mockImportSuccess('0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e');
    let cache = new Cache('test-network', 'test-deployment');
    expect(
      await fetchAndCacheContract(
        cache,
        'avalanche',
        '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e',
        0
      )
    ).to.eql(fiatTokenBuildFile);
    expect(await getBuildFile(cache, 'avalanche', '0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e')).to.eql(
      fiatTokenBuildFile
    );
  });
});
